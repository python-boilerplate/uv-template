[project]
name = "python-boilerplate"
version = "0.9.0"
description = "A template for quickly starting new projects in Python "
readme = "README.md"
requires-python = ">=3.12"
dependencies = ["environs>=14.2.0"]

[dependency-groups]
dev = [
    "commitizen>=4.8.2",
    "mypy>=1.16.0",
    "pre-commit>=4.2.0",
    "pytest>=8.3.5",
    "pytest-asyncio>=1.0.0",
    "ruff>=0.11.11",
]
doc = ["mkdocs-material>=9.6.14", "mkdocstrings[python]>=0.29.1"]

# ================================= RUFF
[tool.ruff]
# Line length according to PEP 8 - 79 characters
line-length = 79

# Target Python version
target-version = "py310"

exclude = [".venv", "venv", "__pycache__", "migrations", "build", "dist"]

[tool.ruff.lint]
# Enable rules
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "N",   # pep8-naming
    "D",   # pydocstyle
    "UP",  # pyupgrade
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
    "RUF", # Ruff-specific rules
]

# Ignore rules
ignore = ["D202", "D212", "D104"]

# Allow unused variables if they start with an underscore
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Docstring handling
[tool.ruff.lint.pydocstyle]
convention = "google"

# Settings for isort
[tool.ruff.lint.isort]
known-first-party = ["src"]
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]

# Formatting options
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

# ================================= MYPY
[tool.mypy]
strict = true                 # Enable strict type checking
explicit_package_bases = true
ignore_missing_imports = true # Ignore missing imports for third-party libraries

# ================================= COMMITIZEN
[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "$version"
version_scheme = "semver2"
version_provider = "uv"
update_changelog_on_bump = true

# ================================= PYTEST
[tool.pytest.ini_options]
# Use the default event loop policy for async tests
asyncio_default_fixture_loop_scope = "function"
